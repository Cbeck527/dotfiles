# : << EOF

# -- general -------------------------------------------------------------------

set-option default-terminal "tmux-256color"
set-option -a terminal-overrides ",alacritty:RGB"

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -g prefix C-a                         # Use C-a as prefix (I love you, GNU Screen!)
unbind C-b
bind a send-prefix

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 15000

# edit configuration
bind e new-window -n "~/.tmux.conf.local" sh -c '${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# activity
set -g monitor-activity on
set -g visual-activity off


# -- navigation ----------------------------------------------------------------

# create session
bind C-c command-prompt -p 'New session name: ' 'new-session -s "%%"'

# find session
bind C-f choose-session -Zw

# session navigation
bind BTab switch-client -l  # move to last session

unbind '"'
unbind '%'
# split current window horizontally
bind S split-window -v -c "#{pane_current_path}"
# split current window vertically
bind | split-window -h -c "#{pane_current_path}"

# new window with name
bind-key C command-prompt -p 'New window name:' "new-window -n %%"


# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind Q resize-pane -Z
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"


# -- urlview -------------------------------------------------------------------

bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# -- cb custom -----------------------------------------------------------------
bind C-a last-window

# sync panes with C-a C-y
bind C-y setw synchronize-panes

bind J select-layout even-vertical
bind H select-layout even-horizontal

# Titles (window number, program name, active (or not)
set -g set-titles on
set -g set-titles-string '#S-#I-#P #W'

# New windows/pane in $PWD
# bind c new-window -c "#{pane_current_path}"

# statusline like screen
setw -g window-status-current-format '#[fg=red]( #[fg=white]#I- #W#[fg=red]#F )'
setw -g window-status-format '#I #W#F '
set -g status-interval 5
set -g status-justify absolute-centre
set -g status-left '#[fg=default][ #[fg=blue]#S #[fg=default]]'
set -g status-right '#{?client_prefix,Pre,} #{?mouse,MMM,} #{?pane_synchronized, #[fg=red]IN_SYNC#[default],}#(cut -c3- ~/.tmux.conf | sh -s _username) #(cut -c3- ~/.tmux.conf | sh -s _hostname)'
set -g status-right-length 1000
set -g status-left-length 1000
set -g visual-activity on
set-option -g status-style fg=cyan,bg=black

# Color (Solarized dark)
set-option -g status-bg black
set-option -g status-fg default

# pane border
set-option -g pane-border-style fg=black
set-option -g pane-active-border-style fg=green


source -q ~/.tmux.conf.local

# tmux-resurrect
run-shell ~/.tmux-plugins/tmux-resurrect/resurrect.tmux

# -- 8< ------------------------------------------------------------------------
# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
# (set +H 2>/dev/null) && set +H || true
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# _hostname() {
#     pane_tty=$(tmux display -p '#{pane_tty}')
#     pane_pid=$(tmux display -p '#{pane_pid}')
#     if ps -t "${pane_tty}" -o command= | grep -v 'grep' | grep -q 'ssh'; then
#         ssh_command=$(ps -t "${pane_tty}" -o user= -o pid= -o ppid= -o command= | awk -v pane_pid="${pane_pid}" '
#             ((/ssh/ && !/-W/) || !/ssh/) && !/tee/ {
#             user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#             }
#             END {
#             pid = pane_pid
#             while (child[pid])
#                 pid = child[pid]

#             print command[pid]
#             }')
#         user=$(echo "$ssh_command" | awk '{print $NF}'|cut -f1 -d@)
#         host=$(echo "$ssh_command" | awk '{print $NF}'|cut -f2 -d@)
#         if [ $user = $host ]; then
#             printf '%s\n' "$(hostname)"
#         else
#             printf '%s\n' "${host}"
#         fi
#   else
#       printf '%s\n' "$(hostname)"
#   fi
# }
#
# _username() {
#     pane_tty=$(tmux display -p '#{pane_tty}')
#     pane_pid=$(tmux display -p '#{pane_pid}')
#     if ps -t "${pane_tty}" -o command= | grep -v 'grep' | grep -q 'ssh'; then
#         ssh_command=$(ps -t "${pane_tty}" -o user= -o pid= -o ppid= -o command= | awk -v pane_pid="${pane_pid}" '
#             ((/ssh/ && !/-W/) || !/ssh/) && !/tee/ {
#             user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#             }
#             END {
#             pid = pane_pid
#             while (child[pid])
#                 pid = child[pid]

#             print command[pid]
#             }')
#         user=$(echo "$ssh_command" | awk '{print $NF}'|cut -f1 -d@)
#         host=$(echo "$ssh_command" | awk '{print $NF}'|cut -f2 -d@)
#         if [ $user = $host ]; then
#             printf '%s\n' "$(whoami)"
#         else
#             printf '%s\n' "${user}"
#         fi
#   else
#       printf '%s\n' "$(whoami)"
#   fi
# }
#
# _root() {
#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}
#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}
#   root=$3
#
#   username=$(_username "$pane_id" "$pane_tty" false)
#
#   [ x"$username" = x"root" ] && echo "$root"
# }
#
# _urlview() {
#   tmux capture-pane -J -S - -E - -b "urlview-$1" -t "$1"
#   tmux split-window "tmux show-buffer -b urlview-$1 | urlview || true; tmux delete-buffer -b urlview-$1"
# }
#
# "$@"
